import sys
import re

finite_automata = {
    0: {
        ' ': 0,
        'i': 1,
        'f': 4,
        's': 9,
        'b': 15,
        'v': 19,
        'T': 23,
        'F': 27,
        'n': 32,
        ',': 500,
        ';': 500,
        ':': 500,
        '=': 36,
        '<': 36,
        '>': 36,
        '!': 36,
        '\+': 36,
        '-': 36,
        '\*': 36,
        '/': 36,
        '\%': 36,
        'e': 38,
        '&': 42,
        '\|': 43,
        'w': 44,
        'r': 52,
        'c': 58,
        'd': 63,
        '\(': 500,
        '\)': 500,
        '\'': 1100,
        '"': 1200,
        '[a-zA-Z]': 1000,
        '[0-9]': 1001,
        '\{': 500,
        '\}': 500
    },
    1: {
        'n': 2,
        'f': 37,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    2: {
        't': 3,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    3: {
        ' ': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    4: {
        'l': 5,
        'o': 48,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    5: {
        'o': 6,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    6: {
        'a': 7,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    7: {
        't': 8,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    8: {
        ' ': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    9: {
        't': 10,
        'w': 49,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    10: {
        'r': 11,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    11: {
        'i': 12,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    12: {
        'n': 13,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    13: {
        'g': 14,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    14: {
        ' ': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    15: {
        'o': 16,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    16: {
        'o': 17,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    17: {
        'l': 18,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    18: {
        ' ': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    19: {
        'o': 20,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    20: {
        'i': 21,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    21: {
        'd': 22,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    22: {
        ' ': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    23: {
        'r': 24,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    24: {
        'u': 25,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    25: {
        'e': 26,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    26: {
        '[\s,;\+=\*/\(\)<>\|\!&]': 'constant',
        '[a-zA-Z0-9]': 1000
    },
    27: {
        'a': 28,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    28: {
        'l': 29,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    29: {
        's': 30,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    30: {
        'e': 31,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    31: {
        '[\s,;\+=\*/\(\)<>\|\!&]': 'constant',
        '[a-zA-Z0-9]': 1000
    },
    32: {
        'u': 33,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    33: {
        'l': 34,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    34: {
        'l': 35,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    35: {
        '[\s,;\+=\*/\(\)<>\|\!&]': 'constant',
        '[a-zA-Z0-9]': 1000
    },
    36: {
        '=': 500,
        '.': 'operator'
    },
    37: {
        '[\s\(]': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    38: {
        'l': 39,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    39: {
        's': 40,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    40: {
        'e': 41,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    41: {
        '[\s\{]': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    42: {
        '&': 500,
        '.': 'operator'
    },
    43: {
        '\|': 500,
        '.': 'operator'
    },
    44: {
        'h': 45,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    45: {
        'i': 46,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    46: {
        'l': 47,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    47: {
        'e': 37,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    48: {
        'r': 37,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    49: {
        'i': 50,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    50: {
        't': 51,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    51: {
        'c': 37,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    52: {
        'e': 53,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    53: {
        't': 54,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    54: {
        'u': 55,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    55: {
        'r': 56,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    56: {
        'n': 57,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    57: {
        ' ': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    58: {
        'a': 59,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    59: {
        's': 60,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    60: {
        'e': 61,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    61: {
        ' ': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    63: {
        'e': 64,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    64: {
        'f': 65,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    65: {
        'a': 66,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    66: {
        'u': 67,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    67: {
        'l': 68,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    68: {
        't': 70,
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    70: {
        '[\s\:]': 'keyword',
        '[a-zA-Z0-9]': 1000
    },
    500: {
        '.*?': 'operator'
    },
    1000: {
        '[a-zA-Z0-9]': 1000,
        '[\s,;\+=\*/\(\)<>\|\!&]': 'identifier'
    },
    1001: {
        '[0-9]': 1001,
        '\.': 1002,
        '[\s,;\+=\*/\(\)<>\|\!&:\.]': 'constant'
    },
    1002: {
        '[0-9]': 1002,
        '[\s,;\+=\*/\(\)<>\|\!&:\.]': 'constant'
    },
    1100: {
        '[\s,;\+=\*/\(\)<>\|\!&:\.]': 'constant',
        '.': 1100
    },
    1200: {
        '[\s,;\+=\*/\(\)<>\|\!&:\.]': 'constant',
        '.': 1200
    }
}

tokens = []
status = 0
current_state = 0
lexeme = ''
with open(sys.argv[1], 'rb') as f:
    while True:
        char = (f.read(1)).decode('ASCII')
        temp = finite_automata[current_state]
        if not re.match(r'\s', char):
            lexeme += char
        status = 0
        for key in temp:
            if re.match(key, char):
                status = 1
                next = temp[key]
                if (next == 'operator' or next == 'keyword' or next == 'identifier' or next == 'constant'):
                    if (next == 'identifier' or next == 'constant'):
                        if not re.match(r'[a-zA-Z0-9]', lexeme[-1]):
                            lexeme = lexeme[:-1]
                    if (next == 'operator'):
                        if (not current_state == 500 and len(lexeme) == 2):
                            lexeme = lexeme[:-1]
                        elif (current_state == 500 and re.match(r'[a-zA-Z0-9\)\(\{\}\+\-\*/,;"\'\%\:]',lexeme[-1]) and len(lexeme) >= 2):
                            lexeme = lexeme[:-1]
                    if (next == 'keyword' and re.match(r'[\)\(\{\}\+\-\*/,;&\|\%\:]',lexeme[-1])):
                        lexeme = lexeme[:-1]
                    f.seek(-1, 1)
                    tokens.append((next, lexeme))
                    lexeme = ''
                    next = 0
                current_state = next
                break
        if status == 0:
            pass
        if not char:
            break

for i in tokens:
    print(i)